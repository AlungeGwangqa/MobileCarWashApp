package za.ac.cput.controller;

import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import za.ac.cput.domain.AdminManager;
import za.ac.cput.factory.AdminManagerFactory;



import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class AdminManagerControllerTest {

    private AdminManager adminManager;

    @Autowired
    private TestRestTemplate restTemplate;

    private static final String BASE_URL = "/MobileCarWashApp/adminManager";

    @BeforeAll
    void setup() {
        // Create AdminManager object (ID may be null, generated by DB)
        adminManager = AdminManagerFactory.createAdminManager(
                "Ayaza7877", "Lian", "king", 8898642687537L,
                27986435678L, "azez@gmail.com", "iu888", "email"
        );

        if (adminManager == null) {
            System.out.println("❌ adminManager is NULL after factory call!");
        } else {
            System.out.println("✅ adminManager created: " + adminManager);
        }
    }

    @Test
    @Order(1)
    void a_create() {
        String url = BASE_URL + "/create";

        ResponseEntity<AdminManager> response = this.restTemplate.postForEntity(url, adminManager, AdminManager.class);

        assertNotNull(response, "Response should not be null");
        //assertNotNull(response.getBody(), "Saved AdminManager should not be null");
        AdminManager adminSaved = response.getBody();
        //assertNotNull(adminSaved);
        assertEquals(adminManager.getAdminManagerId(), adminSaved.getAdminManagerId());
        System.out.println("Created: " + adminSaved);
    }

    @Test
    @Order(2)
    void b_read() {
        String url = BASE_URL + "/read/" + adminManager.getAdminManagerId();
            ResponseEntity<AdminManager>response = this.restTemplate.getForEntity(url,AdminManager.class);
            assertEquals(adminManager.getAdminManagerId(),response.getBody().getAdminManagerId());
      //  AdminManager readAdmin = restTemplate.getForObject(url, AdminManager.class);

        //assertNotNull(readAdmin, "Read AdminManager should not be null");
        System.out.println("Read: " + response.getBody());
    }

    @Test
    @Order(3)
    void c_update() {
        AdminManager updatedAdmin = new AdminManager.Builder()
                .copy(adminManager)
                .setLastName("updated")
                .build();

        String url = BASE_URL + "/update";
        restTemplate.put(url, updatedAdmin);

        ResponseEntity<AdminManager> response = restTemplate.getForEntity(
                BASE_URL + "/read/" + updatedAdmin.getAdminManagerId(),
                AdminManager.class
        );

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody(), "Updated AdminManager should not be null");
        System.out.println("Updated: " + response.getBody());
    }

    @Test
    @Order(4)
    void d_delete() {
        restTemplate.delete(BASE_URL + "/delete/" + adminManager.getAdminManagerId());

        AdminManager deleted = restTemplate.getForObject(
                BASE_URL + "/read/" + adminManager.getAdminManagerId(),
                AdminManager.class
        );

        assertNull(deleted, "Deleted AdminManager should be null");
        System.out.println("Deleted: true");
    }

    @Test
    @Order(5)
    void e_findAll() {
        String url = BASE_URL + "/findAll";
        ResponseEntity<AdminManager[]> response = restTemplate.getForEntity(url, AdminManager[].class);

        assertNotNull(response.getBody(), "FindAll response should not be null");
        System.out.println("Get all:");
        for (AdminManager admin : response.getBody()) {
            assertNotNull(admin, "Each AdminManager in list should not be null");
            System.out.println(admin);
        }
    }
}
